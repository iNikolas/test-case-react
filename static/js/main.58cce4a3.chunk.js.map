{"version":3,"sources":["App.module.css","Components/Login/Login.module.css","Components/Loader/Loader.module.css","Components/Mainpage/MainPage.module.css","API/API.ts","Redux/hooks.ts","validators/validators.ts","Redux/authorizationSlice.ts","Components/Login/LoginErrorAlert.tsx","Redux/Constants.ts","Redux/actions.ts","Components/Login/Login.tsx","Components/HOCs/withAuth.tsx","Redux/transactionsSlice.ts","Redux/fileBlobSlice.ts","Components/Mainpage/ImportButton/ImportButton.tsx","Components/Mainpage/EditPopup/EditPopupDropdown/EditPopupDropdown.tsx","Components/Mainpage/EditPopup/EditPopup.tsx","Components/Mainpage/DeletePopup/DeletePopup.tsx","Components/Mainpage/ActionButtons/ActionButtons.tsx","Components/Mainpage/TransactionsTable/TransactionsTable.tsx","Components/Mainpage/Paginator/Paginator.tsx","Components/Loader/Loader.tsx","Components/Mainpage/TableCombined.tsx","Components/HOCs/withLoading.tsx","Components/Mainpage/Dropdowns/Dropdowns.tsx","Components/Mainpage/ExportButton/ExportButton.tsx","Components/Mainpage/FileListGroup/FileListGroup.tsx","Components/Mainpage/MainPage.tsx","App.tsx","reportWebVitals.ts","Redux/saga.ts","Redux/store.ts","index.tsx","Components/Mainpage/Dropdowns/Dropdowns.module.css"],"names":["module","exports","generateRespond","status","resCode","id","messages","resultCode","data","userId","MockAdapter","axios","onPost","reply","config","userData","JSON","parse","username","password","useAppDispatch","useDispatch","useAppSelector","useSelector","required","value","undefined","authorizationSlice","createSlice","name","initialState","isAuthorized","errMessage","reducers","authSucceeded","state","authFailed","action","payload","cleanErrMessageField","actions","LoginErrorAlert","alertMessage","authorization","dispatch","useState","show","setShow","useEffect","Alert","variant","onClose","dismissible","AUTHORIZATION_REQUESTED","PUT_TRANSACTIONS_REQUESTED","CHANGE_TRANSACTION_STATUS_REQUESTED","DELETE_TRANSACTION_REQUESTED","STATUS_OPTIONS","label","TYPE_OPTIONS","authorizationRequested","createAction","deleteTransactionRequested","changeTransactionStatusRequested","putTransactionRequested","Login","props","useRef","className","css","wrapper","style","position","bottom","right","onSubmit","e","render","min","handleSubmit","invalid","submitting","Form","validate","input","meta","textAlign","fontWeight","Group","controlId","Label","Control","ref","placeholder","touched","error","target","current","placement","arrowProps","popper","backgroundColor","padding","color","borderRadius","length","type","Button","disabled","withAuth","Component","transactionsSlice","transactionStatus","currentTablePage","totalAmountEntriesOfTheTable","transactionListByStatus","Cancelled","Amount","ClientName","Status","TransactionId","Type","Completed","Pending","statusFilters","typeFilters","saveFilteredTransactionsToState","changeCurrentTablePage","awaitingForData","defineStatusFilters","defineTypeFilters","defineTotalAmountEntriesOfTheTable","changeTransactionStatus","newStatus","transactionEntryContainer","filter","forEach","deleteTransaction","fileBlobSlice","fileRequested","filesList","fileRequestStarted","fileRequestFinished","updateFileList","push","ImportButton","isLoading","setLoading","fileEL","accept","onChange","currentTarget","files","Papa","complete","results","delimiter","header","worker","visibility","onClick","click","EditPopupDropdown","setStatus","classNamePrefix","closeMenuOnSelect","components","makeAnimated","defaultValue","options","EditPopup","updatedStatus","setUpdatedStatus","handleClose","Modal","onHide","Header","closeButton","Title","Body","Footer","String","DeletePopup","ActionButtons","showEdit","setShowEdit","showDelete","setShowDelete","ButtonGroup","size","TransactionsTable","transactionsByStatus","transactions","exportTransactionsRequest","fileBlob","filteredTransactions","statusFilter","filteredList","Object","entries","transEntry","fromEntries","transactionListValues","values","unparsedTableData","unparse","blob","Blob","saveAs","tableData","slice","map","arrEntryRow","transactionRow","cellEntry","index","keys","caption","Table","striped","bordered","hover","Paginator","totalAmountOfPages","Math","ceil","items","number","Pagination","Item","handleCurrentPageClick","active","Ellipsis","First","Prev","Next","Last","Loader","withLoading","display","justifyContent","Dropdowns","isMulti","val","ExportButton","fileRequest","FileListGroup","fileList","entry","ListGroup","container","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","authorizeUser","fetchTransactions","mySaga","call","requestAuth","authRespond","Error","put","message","PendingSchema","schema","Entity","idAttribute","CompletedSchema","CancelledSchema","transactionsNormalizedByStatus","Array","filteredTransactionsData","normalize","entities","alert","takeEvery","params","a","post","respond","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","authorizationReducer","transactionReducer","fileBlobReducer","middleware","getDefaultMiddleware","concat","run","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.58cce4a3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__3Yzea\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Login_wrapper__31AdJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"lds-grid\":\"Loader_lds-grid__GrKkF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"MainPage_container__20tSO\"};","import axios from \"axios\";\nimport MockAdapter from \"axios-mock-adapter\";\n\nconst mock = new MockAdapter(axios);\n\nmock.onPost(\"/auth\").reply(function (config) {\n  let userData;\n  if (config.data) userData = JSON.parse(config.data);\n  if (userData?.username === \"test\" && userData?.password === \"666666\")\n    return generateRespond(200, 0, 1);\n  return generateRespond(200, 1, null, [\"Wrong authorization data\"]);\n});\n\nfunction generateRespond(\n  status: number,\n  resCode: number,\n  id: number | null,\n  messages: Array<string> = []\n) {\n  return [\n    status,\n    {\n      resultCode: resCode,\n      messages: messages,\n      data: {\n        userId: id,\n      },\n    },\n  ];\n}\n","import { TypedUseSelectorHook, useSelector, useDispatch } from \"react-redux\";\nimport { RootState, AppDispatch } from \"./store\";\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","export function required(value: string) {\n  return value ? undefined : \"This field is required\";\n}\n\nexport function minLength(min: number) {\n  return function (value: string) {\n    value = value ?? \"\";\n    return value.length > min\n      ? undefined\n      : `Min. length for this Field at least ${min} char.`;\n  };\n}\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\ninterface AuthorizationState {\n  isAuthorized: boolean;\n  errMessage: string;\n}\n\nconst initialState: AuthorizationState = {\n  isAuthorized: false,\n  errMessage: \"\",\n};\n\nexport const authorizationSlice = createSlice({\n  name: \"authorization\",\n  initialState,\n  reducers: {\n    authSucceeded: (state) => {\n      state.isAuthorized = true;\n      state.errMessage = \"\";\n    },\n    authFailed: (state, action: PayloadAction<string>) => {\n      state.isAuthorized = false;\n      state.errMessage = action.payload;\n    },\n    cleanErrMessageField: (state) => {\n      state.errMessage = \"\";\n    },\n  },\n});\n\nexport const { authSucceeded, authFailed, cleanErrMessageField } =\n  authorizationSlice.actions;\n\nexport default authorizationSlice.reducer;\n","import React, { useEffect, useState } from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\nimport { cleanErrMessageField } from \"../../Redux/authorizationSlice\";\nimport { useAppDispatch, useAppSelector } from \"../../Redux/hooks\";\n\nfunction LoginErrorAlert() {\n  const alertMessage = useAppSelector(\n    (state) => state.authorization.errMessage\n  );\n  const dispatch = useAppDispatch();\n  const [show, setShow] = useState(false);\n\n  useEffect(\n    function () {\n      if (alertMessage) setShow(true);\n    },\n    [alertMessage]\n  );\n\n  if (show) {\n    return (\n      <Alert\n        variant=\"danger\"\n        onClose={() => {\n          setShow(false);\n          dispatch(cleanErrMessageField());\n        }}\n        dismissible\n      >\n        {alertMessage}\n      </Alert>\n    );\n  } else return null;\n}\n\nexport default LoginErrorAlert;\n","export const AUTHORIZATION_REQUESTED = \"AUTHORIZATION_REQUESTED\";\nexport const PUT_TRANSACTIONS_REQUESTED = \"PUT_TRANSACTIONS_REQUESTED\";\nexport const CHANGE_TRANSACTION_STATUS_REQUESTED =\n  \"CHANGE_TRANSACTION_STATUS_REQUESTED\";\nexport const DELETE_TRANSACTION_REQUESTED = \"DELETE_TRANSACTION_REQUESTED\";\n\nexport const AMOUNT_OF_ENTRIES_FOR_ONE_TABLE_PAGE = 10;\nexport const STATUS_OPTIONS: Array<{ value: string; label: string }> = [\n  { value: \"Pending\", label: \"Pending\" },\n  { value: \"Completed\", label: \"Completed\" },\n  { value: \"Cancelled\", label: \"Cancelled\" },\n];\nexport const TYPE_OPTIONS: Array<{ value: string; label: string }> = [\n  { value: \"Refill\", label: \"Refill\" },\n  { value: \"Withdrawal\", label: \"Withdrawal\" },\n];\n","import { createAction } from \"@reduxjs/toolkit\";\nimport {\n  AUTHORIZATION_REQUESTED,\n  CHANGE_TRANSACTION_STATUS_REQUESTED,\n  DELETE_TRANSACTION_REQUESTED,\n  PUT_TRANSACTIONS_REQUESTED,\n} from \"./Constants\";\n\ninterface StatusAction {\n  Status: \"Pending\" | \"Completed\" | \"Cancelled\";\n  TransactionId: string;\n}\n\nexport const authorizationRequested = createAction<FormData>(\n  AUTHORIZATION_REQUESTED\n);\nexport const deleteTransactionRequested = createAction<string>(\n  DELETE_TRANSACTION_REQUESTED\n);\nexport const changeTransactionStatusRequested = createAction<StatusAction>(\n  CHANGE_TRANSACTION_STATUS_REQUESTED\n);\nexport const putTransactionRequested = createAction<unknown[]>(\n  PUT_TRANSACTIONS_REQUESTED\n);\n","import React, { useRef } from \"react\";\nimport FormBootstrap from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport { Form, Field } from \"react-final-form\";\nimport { minLength, required } from \"../../validators/validators\";\nimport Overlay from \"react-bootstrap/cjs/Overlay\";\nimport css from \"./Login.module.css\";\nimport { useAppDispatch } from \"../../Redux/hooks\";\nimport LoginErrorAlert from \"./LoginErrorAlert\";\nimport { authorizationRequested } from \"../../Redux/actions\";\n\ninterface PropsType {\n  style?: React.CSSProperties;\n}\n\nexport const Login = (props: PropsType) => {\n  const username = useRef(null);\n  const password = useRef(null);\n  const dispatch = useAppDispatch();\n\n  const handleSubmit = (e: FormData) => {\n    dispatch(authorizationRequested(e));\n  };\n\n  return (\n    <div className={css.wrapper}>\n      <div\n        style={{\n          position: \"absolute\",\n          bottom: 10,\n          right: 10,\n        }}\n      >\n        <LoginErrorAlert />\n      </div>\n      <Form\n        onSubmit={handleSubmit}\n        render={({ handleSubmit, invalid, submitting }) => {\n          return (\n            <FormBootstrap onSubmit={handleSubmit}>\n              <Field\n                validate={required}\n                name=\"username\"\n                render={({ input, meta }) => (\n                  <div\n                    style={{\n                      textAlign: \"left\",\n                      fontWeight: \"bold\",\n                    }}\n                  >\n                    <FormBootstrap.Group className=\"mb-3\" controlId=\"username\">\n                      <FormBootstrap.Label>Username</FormBootstrap.Label>\n                      <FormBootstrap.Control\n                        ref={username}\n                        {...input}\n                        placeholder=\"Username\"\n                      />\n                    </FormBootstrap.Group>\n                    {meta.touched && meta.error && (\n                      <Overlay\n                        target={username.current}\n                        show={true}\n                        placement=\"right\"\n                      >\n                        {({\n                          placement,\n                          arrowProps,\n                          show: _show,\n                          popper,\n                          ...props\n                        }) => (\n                          <div\n                            {...props}\n                            style={{\n                              backgroundColor: \"rgba(255, 100, 100, 0.85)\",\n                              padding: \"2px 10px\",\n                              color: \"white\",\n                              borderRadius: 3,\n                              ...props.style,\n                            }}\n                          >\n                            {meta.error}\n                          </div>\n                        )}\n                      </Overlay>\n                    )}\n                  </div>\n                )}\n              />\n              <Field\n                validate={minLength(4)}\n                name=\"password\"\n                render={({ input, meta }) => (\n                  <div\n                    style={{\n                      textAlign: \"left\",\n                      fontWeight: \"bold\",\n                    }}\n                  >\n                    <FormBootstrap.Group\n                      className=\"mb-3\"\n                      controlId=\"formBasicPassword\"\n                    >\n                      <FormBootstrap.Label>Password</FormBootstrap.Label>\n                      <FormBootstrap.Control\n                        ref={password}\n                        {...input}\n                        type=\"password\"\n                        placeholder=\"Password\"\n                      />\n                    </FormBootstrap.Group>\n                    {meta.touched && meta.error && (\n                      <Overlay\n                        target={password.current}\n                        show={true}\n                        placement=\"right\"\n                      >\n                        {({\n                          placement,\n                          arrowProps,\n                          show: _show,\n                          popper,\n                          ...props\n                        }) => (\n                          <div\n                            {...props}\n                            style={{\n                              backgroundColor: \"rgba(255, 100, 100, 0.85)\",\n                              padding: \"2px 10px\",\n                              color: \"white\",\n                              borderRadius: 3,\n                              ...props.style,\n                            }}\n                          >\n                            {meta.error}\n                          </div>\n                        )}\n                      </Overlay>\n                    )}\n                  </div>\n                )}\n              />\n\n              <Button\n                variant=\"primary\"\n                type=\"submit\"\n                disabled={submitting || invalid}\n              >\n                Login\n              </Button>\n            </FormBootstrap>\n          );\n        }}\n      />\n    </div>\n  );\n};\n","import React from \"react\";\nimport { useAppSelector } from \"../../Redux/hooks\";\nimport { Login } from \"../Login/Login\";\n\nfunction withAuth(Component: React.ComponentType) {\n  function AuthenticatedComponent() {\n    const isAuthorized = useAppSelector(\n      (state) => state.authorization.isAuthorized\n    );\n    return <div>{isAuthorized ? <Component /> : <Login />}</div>;\n  }\n\n  return AuthenticatedComponent;\n}\n\nexport default withAuth;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { ChangeStatusPayloadActionType } from \"./saga\";\n\nexport interface TransactionEntry {\n  Amount: string;\n  ClientName: string;\n  Status: \"Completed\" | \"Cancelled\" | \"Pending\";\n  TransactionId: string;\n  Type: \"Withdrawal\" | \"Refill\";\n}\n\ninterface TransactionListByStatus {\n  Cancelled: {\n    [index: string]: TransactionEntry;\n  };\n  Completed: {\n    [index: string]: TransactionEntry;\n  };\n  Pending: {\n    [index: string]: TransactionEntry;\n  };\n}\n\ntype StatusFilters = Array<\"Completed\" | \"Cancelled\" | \"Pending\">;\ntype TypeFilters = Array<\"Withdrawal\" | \"Refill\">;\n\ninterface TransactionsState {\n  transactionStatus: \"initial\" | \"importing\" | \"imported\" | \"error\";\n  currentTablePage: number;\n  totalAmountEntriesOfTheTable: number;\n  transactionListByStatus: TransactionListByStatus;\n  statusFilters: StatusFilters;\n  typeFilters: TypeFilters;\n}\n\nconst initialState: TransactionsState = {\n  transactionStatus: \"initial\",\n  currentTablePage: 1,\n  totalAmountEntriesOfTheTable: 0,\n  transactionListByStatus: {\n    Cancelled: {\n      \"1\": {\n        Amount: \"\",\n        ClientName: \"\",\n        Status: \"Completed\",\n        TransactionId: \"\",\n        Type: \"Withdrawal\",\n      },\n    },\n    Completed: {\n      \"1\": {\n        Amount: \"\",\n        ClientName: \"\",\n        Status: \"Completed\",\n        TransactionId: \"\",\n        Type: \"Withdrawal\",\n      },\n    },\n    Pending: {\n      \"1\": {\n        Amount: \"\",\n        ClientName: \"\",\n        Status: \"Completed\",\n        TransactionId: \"\",\n        Type: \"Withdrawal\",\n      },\n    },\n  },\n  statusFilters: [\"Completed\", \"Cancelled\", \"Pending\"],\n  typeFilters: [\"Withdrawal\", \"Refill\"],\n};\n\nexport const transactionsSlice = createSlice({\n  name: \"transactions\",\n  initialState,\n  reducers: {\n    saveFilteredTransactionsToState: (\n      state,\n      action: PayloadAction<TransactionListByStatus>\n    ) => {\n      state.transactionListByStatus = action.payload;\n      state.transactionStatus = \"imported\";\n    },\n    changeCurrentTablePage: (state, action: PayloadAction<number>) => {\n      state.currentTablePage = action.payload;\n    },\n    awaitingForData: (state) => {\n      state.transactionStatus = \"importing\";\n    },\n    defineStatusFilters: (state, action: PayloadAction<StatusFilters>) => {\n      state.statusFilters = action.payload;\n    },\n    defineTypeFilters: (state, action: PayloadAction<TypeFilters>) => {\n      state.typeFilters = action.payload;\n    },\n    defineTotalAmountEntriesOfTheTable: (\n      state,\n      action: PayloadAction<number>\n    ) => {\n      state.totalAmountEntriesOfTheTable = action.payload;\n    },\n    changeTransactionStatus: (\n      state,\n      action: PayloadAction<ChangeStatusPayloadActionType>\n    ) => {\n      const id = action.payload.TransactionId;\n      const newStatus = action.payload.Status;\n      let transactionEntryContainer: TransactionEntry = {\n        Amount: \"\",\n        ClientName: \"\",\n        Status: \"Completed\",\n        TransactionId: \"\",\n        Type: \"Withdrawal\",\n      };\n      const statusesForLookup = <StatusFilters>(\n        [\"Completed\", \"Cancelled\", \"Pending\"].filter(\n          (status) => status !== newStatus\n        )\n      );\n\n      statusesForLookup.forEach((status) => {\n        if (state.transactionListByStatus[status][id]) {\n          transactionEntryContainer = {\n            ...state.transactionListByStatus[status][id],\n            Status: newStatus,\n          };\n          delete state.transactionListByStatus[status][id];\n        }\n      });\n\n      state.transactionListByStatus[newStatus][id] = transactionEntryContainer\n    },\n    deleteTransaction: (state, action: PayloadAction<string>) => {\n      const id = action.payload;\n      const statusesForLookup = <StatusFilters>[\n        \"Completed\",\n        \"Cancelled\",\n        \"Pending\",\n      ];\n\n      statusesForLookup.forEach((status) => {\n        delete state.transactionListByStatus[status][id];\n      });\n    },\n  },\n});\n\nexport const {\n  saveFilteredTransactionsToState,\n  changeCurrentTablePage,\n  awaitingForData,\n  defineStatusFilters,\n  defineTypeFilters,\n  defineTotalAmountEntriesOfTheTable,\n  changeTransactionStatus,\n  deleteTransaction,\n} = transactionsSlice.actions;\n\nexport default transactionsSlice.reducer;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\ninterface FileBlobState {\n  fileRequested: boolean;\n  filesList: Array<string>;\n}\n\nconst initialState: FileBlobState = {\n  fileRequested: false,\n  filesList: [],\n};\n\nexport const fileBlobSlice = createSlice({\n  name: \"fileBlobSlice\",\n  initialState,\n  reducers: {\n    fileRequestStarted: (state) => {\n      state.fileRequested = true;\n    },\n    fileRequestFinished: (state) => {\n      state.fileRequested = false;\n    },\n    updateFileList: (state, action: PayloadAction<string>) => {\n      state.filesList.push(action.payload);\n    },\n  },\n});\n\nexport const { fileRequestStarted, fileRequestFinished, updateFileList } =\n  fileBlobSlice.actions;\n\nexport default fileBlobSlice.reducer;\n","import Papa from \"papaparse\";\nimport React, { ChangeEvent, useRef, useState } from \"react\";\nimport Button from \"react-bootstrap/cjs/Button\";\nimport { useAppDispatch } from \"../../../Redux/hooks\";\nimport { awaitingForData } from \"../../../Redux/transactionsSlice\";\nimport { updateFileList } from \"../../../Redux/fileBlobSlice\";\nimport { putTransactionRequested } from \"../../../Redux/actions\";\n\nfunction ImportButton() {\n  const [isLoading, setLoading] = useState(false);\n  const fileEL = useRef<HTMLInputElement>(null);\n  const dispatch = useAppDispatch();\n\n  const handleClick = () => {\n    if (!isLoading) fileEL.current?.click();\n  };\n\n  const handleFileDownloading = (e: ChangeEvent<HTMLInputElement>) => {\n    if (e.currentTarget.files?.length) {\n      setLoading(true);\n      dispatch(awaitingForData());\n      dispatch(updateFileList(e.currentTarget.files[0].name));\n      Papa.parse(e.currentTarget.files[0], {\n        complete: (results) => {\n          setLoading(false);\n          dispatch(putTransactionRequested(results.data));\n        },\n        delimiter: \",\",\n        header: true,\n        worker: true,\n      });\n    }\n  };\n\n  return (\n    <span>\n      <input\n        accept=\".csv\"\n        onChange={handleFileDownloading}\n        ref={fileEL}\n        style={{ visibility: \"hidden\", position: \"fixed\" }}\n        type=\"file\"\n      />\n      <Button\n        className=\"m-1\"\n        variant=\"primary\"\n        disabled={isLoading}\n        onClick={handleClick}\n      >\n        {isLoading ? \"Importing…\" : \"Import\"}\n      </Button>\n    </span>\n  );\n}\n\nexport default ImportButton;\n","import React from \"react\";\nimport Select from \"react-select\";\nimport makeAnimated from \"react-select/animated\";\nimport { STATUS_OPTIONS } from \"../../../../Redux/Constants\";\n\ninterface PropType {\n  status: string;\n  setStatus: CallableFunction;\n}\n\nfunction EditPopupDropdown({ status, setStatus }: PropType) {\n  const handleStatusChange = (e: any) => {\n    setStatus(e.value);\n  };\n\n  return (\n    <Select\n      classNamePrefix=\"react-select\"\n      closeMenuOnSelect={true}\n      components={makeAnimated()}\n      defaultValue={STATUS_OPTIONS.filter((type) => type.value === status)}\n      options={STATUS_OPTIONS}\n      onChange={handleStatusChange}\n    />\n  );\n}\n\nexport default EditPopupDropdown;\n","import React, { useState } from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\nimport EditPopupDropdown from \"./EditPopupDropdown/EditPopupDropdown\";\nimport { useAppDispatch } from \"../../../Redux/hooks\";\nimport { changeTransactionStatusRequested } from \"../../../Redux/actions\";\n\ninterface PropType {\n  id: number;\n  show: boolean;\n  setShow: CallableFunction;\n  status: \"Pending\" | \"Completed\" | \"Cancelled\";\n}\n\nfunction EditPopup({ id, show, setShow, status }: PropType) {\n  const dispatch = useAppDispatch();\n  const [updatedStatus, setUpdatedStatus] = useState(status);\n\n  const handleClose = () => setShow(false);\n  const handleSaveChanges = () => {\n    if (updatedStatus !== status) {\n      const action = {\n        Status: updatedStatus,\n        TransactionId: String(id),\n      };\n      dispatch(changeTransactionStatusRequested(action));\n    }\n    setShow(false);\n  };\n\n  return (\n    <Modal show={show} onHide={handleClose}>\n      <Modal.Header closeButton>\n        <Modal.Title>Transaction ID: {id}.</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <span className={\"font-weight-bold\"}>Edit status:</span>\n        <EditPopupDropdown\n          status={updatedStatus}\n          setStatus={setUpdatedStatus}\n        />\n      </Modal.Body>\n      <Modal.Footer>\n        <Button variant=\"secondary\" onClick={handleClose}>\n          Close\n        </Button>\n        <Button variant=\"primary\" onClick={handleSaveChanges}>\n          Save Changes\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n\nexport default EditPopup;\n","import React from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\nimport { useAppDispatch } from \"../../../Redux/hooks\";\nimport { deleteTransactionRequested } from \"../../../Redux/actions\";\n\ninterface PropType {\n  id: number;\n  show: boolean;\n  setShow: CallableFunction;\n}\n\nfunction DeletePopup({ id, show, setShow }: PropType) {\n  const dispatch = useAppDispatch();\n\n  const handleClose = () => setShow(false);\n  const handleDeleteClick = () => {\n    dispatch(deleteTransactionRequested(String(id)));\n    setShow(false);\n  };\n\n  return (\n    <Modal show={show} onHide={handleClose}>\n      <Modal.Header closeButton>\n        <Modal.Title>Confirmation needed</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <span className={\"font-weight-bold\"}>\n          Are you sure you want irreversibly Delete Transaction with id {id}?\n        </span>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button variant=\"primary\" onClick={handleClose}>\n          CANCEL\n        </Button>\n        <Button variant=\"danger\" onClick={handleDeleteClick}>\n          DELETE\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n\nexport default DeletePopup;\n","import React, { useState } from \"react\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\nimport Button from \"react-bootstrap/Button\";\nimport EditPopup from \"../EditPopup/EditPopup\";\nimport DeletePopup from \"../DeletePopup/DeletePopup\";\n\ninterface PropType {\n  id: number;\n  status: \"Pending\" | \"Completed\" | \"Cancelled\";\n}\n\nfunction ActionButtons({ id, status }: PropType) {\n  const [showEdit, setShowEdit] = useState(false);\n  const [showDelete, setShowDelete] = useState(false);\n\n  const handleEditEvent = () => {\n    setShowEdit(true);\n  };\n  const handleDeleteEvent = () => {\n    setShowDelete(true);\n  };\n\n  return (\n    <>\n      <ButtonGroup size=\"sm\">\n        <Button variant=\"primary\" onClick={handleEditEvent}>\n          Edit\n        </Button>\n        <Button variant=\"danger\" onClick={handleDeleteEvent}>\n          Delete\n        </Button>\n      </ButtonGroup>\n\n      <EditPopup\n        status={status}\n        show={showEdit}\n        setShow={setShowEdit}\n        id={id}\n      />\n      <DeletePopup id={id} show={showDelete} setShow={setShowDelete} />\n    </>\n  );\n}\n\nexport default ActionButtons;\n","import React, { useEffect } from \"react\";\nimport Table from \"react-bootstrap/Table\";\nimport { useAppDispatch, useAppSelector } from \"../../../Redux/hooks\";\nimport { AMOUNT_OF_ENTRIES_FOR_ONE_TABLE_PAGE } from \"../../../Redux/Constants\";\nimport {\n  TransactionEntry,\n  defineTotalAmountEntriesOfTheTable,\n} from \"../../../Redux/transactionsSlice\";\nimport ActionButtons from \"../ActionButtons/ActionButtons\";\nimport { fileRequestFinished } from \"../../../Redux/fileBlobSlice\";\nimport Papa from \"papaparse\";\nimport { saveAs } from \"file-saver\";\n\nfunction TransactionsTable() {\n  const dispatch = useAppDispatch();\n  const transactionsByStatus = useAppSelector(\n    (state) => state.transactions.transactionListByStatus\n  );\n  const exportTransactionsRequest = useAppSelector(\n    (state) => state.fileBlob.fileRequested\n  );\n  const statusFilters = useAppSelector(\n    (state) => state.transactions.statusFilters\n  );\n  const typeFilters = useAppSelector((state) => state.transactions.typeFilters);\n\n  let filteredTransactions = {};\n\n  statusFilters.forEach((statusFilter) => {\n    if (typeFilters.length === 2) {\n      filteredTransactions = { ...filteredTransactions, ...transactionsByStatus[statusFilter] };\n    } else {\n      const filteredList = Object.entries(transactionsByStatus[statusFilter]).filter(\n        (transEntry) => transEntry[1].Type === typeFilters[0]\n      );\n      filteredTransactions = {\n        ...filteredTransactions,\n        ...Object.fromEntries(filteredList),\n      };\n    }\n  });\n\n  const transactionListValues: Array<TransactionEntry> =\n    Object.values(filteredTransactions);\n\n  useEffect(() => {\n    if (exportTransactionsRequest) {\n      const unparsedTableData = Papa.unparse(transactionListValues);\n      const blob = new Blob([unparsedTableData], {\n        type: \"text/plain;charset=utf-8\",\n      });\n      saveAs(blob, \"transaction.csv\");\n      dispatch(fileRequestFinished());\n    }\n  }, [exportTransactionsRequest]);\n  useEffect(() => {\n    dispatch(defineTotalAmountEntriesOfTheTable(transactionListValues.length));\n  });\n\n  const currentTablePage = useAppSelector(\n    (state) => state.transactions.currentTablePage\n  );\n\n  let header: JSX.Element[] = [];\n  const tableData: JSX.Element[] = transactionListValues\n    .slice(\n      (currentTablePage - 1) * AMOUNT_OF_ENTRIES_FOR_ONE_TABLE_PAGE,\n      currentTablePage * AMOUNT_OF_ENTRIES_FOR_ONE_TABLE_PAGE\n    )\n    .map((arrEntryRow) => {\n      const arrEntryRowCells = Object.values(arrEntryRow);\n      const transactionRow = arrEntryRowCells.map((cellEntry, index) => (\n        <td key={cellEntry + String(currentTablePage - 1) + String(index)}>\n          {cellEntry}\n        </td>\n      ));\n      return (\n        <tr key={arrEntryRow.TransactionId + \"trt\"}>\n          {transactionRow}\n          <td>\n            <ActionButtons\n              status={\n                arrEntryRow.Status as \"Pending\" | \"Completed\" | \"Cancelled\"\n              }\n              id={+arrEntryRow.TransactionId}\n            />\n          </td>\n        </tr>\n      );\n    });\n\n  if (transactionListValues.length) {\n    const headerCaptions = Object.keys(transactionListValues[0]);\n    header = headerCaptions.map((caption, index) => (\n      <th key={caption + index}>{caption}</th>\n    ));\n  }\n\n  return (\n    <Table striped bordered hover size=\"sm\">\n      <thead>\n        <tr>\n          {header}\n          <th>Action</th>\n        </tr>\n      </thead>\n      <tbody>{tableData}</tbody>\n    </Table>\n  );\n}\n\nexport default TransactionsTable;\n","import React, { useEffect } from \"react\";\nimport Pagination from \"react-bootstrap/Pagination\";\nimport { AMOUNT_OF_ENTRIES_FOR_ONE_TABLE_PAGE } from \"../../../Redux/Constants\";\nimport { useAppDispatch, useAppSelector } from \"../../../Redux/hooks\";\nimport { changeCurrentTablePage } from \"../../../Redux/transactionsSlice\";\n\nfunction Paginator() {\n  const dispatch = useAppDispatch();\n  const currentTablePage = useAppSelector(\n    (state) => state.transactions.currentTablePage\n  );\n  const totalAmountEntriesOfTheTable = useAppSelector(\n    (state) => state.transactions.totalAmountEntriesOfTheTable\n  );\n  const totalAmountOfPages = Math.ceil(\n    totalAmountEntriesOfTheTable / AMOUNT_OF_ENTRIES_FOR_ONE_TABLE_PAGE\n  );\n  useEffect(() => {\n    if (currentTablePage > totalAmountOfPages)\n      dispatch(\n        changeCurrentTablePage(\n          totalAmountOfPages === 0 ? 1 : totalAmountOfPages\n        )\n      );\n  }, [totalAmountOfPages]);\n\n  const items: React.ReactElement[] = [];\n\n  newIteration: for (\n    let number = currentTablePage - 3;\n    number <= currentTablePage + 3;\n    number++\n  ) {\n    if (number < 1) continue newIteration;\n    if (number > totalAmountOfPages) continue newIteration;\n    items.push(\n      <Pagination.Item\n        onClick={() => handleCurrentPageClick(number)}\n        key={number + \"hgfh\"}\n        active={number === currentTablePage}\n      >\n        {number}\n      </Pagination.Item>\n    );\n  }\n\n  if (currentTablePage < totalAmountOfPages - 3 && totalAmountOfPages > 3) {\n    if (currentTablePage < totalAmountOfPages - 4)\n      items.push(<Pagination.Ellipsis key={\"Ellipsis\"} />);\n    items.push(\n      <Pagination.Item\n        onClick={() => handleCurrentPageClick(totalAmountOfPages)}\n        key={totalAmountOfPages + \"totalAmountOfPages\"}\n      >\n        {totalAmountOfPages}\n      </Pagination.Item>\n    );\n  }\n\n  function handleCurrentPageClick(number: number) {\n    dispatch(changeCurrentTablePage(number));\n  }\n\n  function handleNextClick() {\n    if (currentTablePage < totalAmountOfPages)\n      dispatch(changeCurrentTablePage(currentTablePage + 1));\n  }\n\n  function handlePrevClick() {\n    if (currentTablePage > 1)\n      dispatch(changeCurrentTablePage(currentTablePage - 1));\n  }\n\n  return (\n    <Pagination>\n      <Pagination.First onClick={() => dispatch(changeCurrentTablePage(1))} />\n      <Pagination.Prev onClick={handlePrevClick} />\n\n      {items}\n\n      <Pagination.Next onClick={handleNextClick} />\n      <Pagination.Last\n        onClick={() => dispatch(changeCurrentTablePage(totalAmountOfPages))}\n      />\n    </Pagination>\n  );\n}\n\nexport default Paginator;\n","import React from \"react\";\nimport css from \"./Loader.module.css\";\n\nfunction Loader() {\n  return (\n    <div className={css[\"lds-grid\"]}>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  );\n}\n\nexport default Loader;\n","import React from \"react\";\nimport TransactionsTable from \"./TransactionsTable/TransactionsTable\";\nimport Paginator from \"./Paginator/Paginator\";\nimport withLoading from \"../HOCs/withLoading\";\n\nfunction TableCombined() {\n  return (\n    <div>\n      <TransactionsTable />\n      <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n        <Paginator />\n      </div>\n    </div>\n  );\n}\n\nexport default withLoading(TableCombined);\n","import React from \"react\";\nimport { useAppSelector } from \"../../Redux/hooks\";\nimport Loader from \"../Loader/Loader\";\n\nfunction withLoader(Component: React.ComponentType) {\n  function WithLoaderComponent() {\n    const transactionStatus = useAppSelector(\n      (state) => state.transactions.transactionStatus\n    );\n    if (transactionStatus === \"initial\")\n      return <div>Please import *.csv file to start work</div>;\n    if (transactionStatus === \"importing\")\n      return (\n        <div>\n          <Loader />\n        </div>\n      );\n    if (transactionStatus === \"imported\") return <Component />;\n    return null;\n  }\n\n  return WithLoaderComponent;\n}\n\nexport default withLoader;\n","import React from \"react\";\nimport Select, { OptionsType, OptionTypeBase } from \"react-select\";\nimport makeAnimated from \"react-select/animated\";\nimport { STATUS_OPTIONS, TYPE_OPTIONS } from \"../../../Redux/Constants\";\nimport css from \"./Dropdowns.module.css\";\nimport { useAppDispatch } from \"../../../Redux/hooks\";\nimport {\n  defineStatusFilters,\n  defineTypeFilters,\n} from \"../../../Redux/transactionsSlice\";\n\nfunction Dropdowns() {\n  const dispatch = useAppDispatch();\n\n  const handleStatusChangeOptions = (\n    e: OptionTypeBase | OptionsType<OptionTypeBase> | null\n  ) => {\n    const values = e?.map((val: { value: string; label: string }) => val.value);\n    dispatch(defineStatusFilters(values));\n  };\n\n  const handleTypeChangeOptions = (\n    e: OptionTypeBase | OptionsType<OptionTypeBase> | null\n  ) => {\n    const values = e?.map((val: { value: string; label: string }) => val.value);\n    dispatch(defineTypeFilters(values));\n  };\n\n  return (\n    <div>\n      <Select\n        className={css[\"react-select--inline\"]}\n        classNamePrefix={css[\"react-select\"]}\n        closeMenuOnSelect={false}\n        components={makeAnimated()}\n        defaultValue={STATUS_OPTIONS}\n        isMulti\n        options={STATUS_OPTIONS}\n        onChange={handleStatusChangeOptions}\n      />\n      <Select\n        className={css[\"react-select--inline\"]}\n        classNamePrefix={css[\"react-select\"]}\n        closeMenuOnSelect={false}\n        components={makeAnimated()}\n        defaultValue={TYPE_OPTIONS}\n        isMulti\n        options={TYPE_OPTIONS}\n        onChange={handleTypeChangeOptions}\n      />\n    </div>\n  );\n}\n\nexport default Dropdowns;\n","import React from \"react\";\nimport Button from \"react-bootstrap/cjs/Button\";\nimport { fileRequestStarted } from \"../../../Redux/fileBlobSlice\";\nimport { useAppDispatch, useAppSelector } from \"../../../Redux/hooks\";\n\nfunction ExportButton() {\n  const dispatch = useAppDispatch();\n  const fileRequest = useAppSelector((state) => state.fileBlob.fileRequested);\n\n  const handleClick = () => {\n    dispatch(fileRequestStarted());\n  };\n\n  return (\n    <Button variant=\"primary\" disabled={fileRequest} onClick={handleClick}>\n      {fileRequest ? \"Exporting…\" : \"Export\"}\n    </Button>\n  );\n}\n\nexport default ExportButton;\n","import React from \"react\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport { useAppSelector } from \"../../../Redux/hooks\";\n\nfunction FileListGroup() {\n  const fileList = useAppSelector((state) => state.fileBlob.filesList).map(\n    (entry, index) => (\n      <ListGroup.Item key={entry + index} action variant=\"light\">\n        {entry}\n      </ListGroup.Item>\n    )\n  );\n\n  return <ListGroup className=\"mh-100\">{fileList}</ListGroup>;\n}\n\nexport default FileListGroup;\n","import React from \"react\";\nimport withAuth from \"../HOCs/withAuth\";\nimport ImportButton from \"./ImportButton/ImportButton\";\nimport TableCombined from \"./TableCombined\";\nimport Dropdowns from \"./Dropdowns/Dropdowns\";\nimport ExportButton from \"./ExportButton/ExportButton\";\nimport FileListGroup from \"./FileListGroup/FileListGroup\";\nimport css from \"./MainPage.module.css\";\n\nconst MainPage = () => {\n  return (\n    <div className={css.container}>\n      <header>Application Header</header>\n      <nav>\n        <section>\n          <Dropdowns />\n        </section>\n        <section>\n          <ImportButton /> <ExportButton />\n        </section>\n      </nav>\n      <main>\n        <TableCombined />\n      </main>\n      <aside>\n        <FileListGroup />\n      </aside>\n    </div>\n  );\n};\n\nexport default withAuth(MainPage);\n","import React from \"react\";\nimport css from \"./App.module.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./API/API\";\nimport MainPage from \"./Components/Mainpage/MainPage\";\n\nfunction App() {\n  return (\n    <div className={css.App}>\n      <MainPage />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import \"../API/API\";\nimport { call, put, takeEvery } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport {\n  AUTHORIZATION_REQUESTED,\n  PUT_TRANSACTIONS_REQUESTED,\n  CHANGE_TRANSACTION_STATUS_REQUESTED,\n  DELETE_TRANSACTION_REQUESTED,\n} from \"./Constants\";\nimport { authFailed, authSucceeded } from \"./authorizationSlice\";\nimport {\n  saveFilteredTransactionsToState,\n  changeTransactionStatus,\n  deleteTransaction,\n} from \"./transactionsSlice\";\nimport { TransactionEntry } from \"./transactionsSlice\";\nimport {normalize, schema} from \"normalizr\";\n\ninterface AuthPayloadType {\n  username: string;\n  password: string;\n}\n\ninterface AuthActionType {\n  type: typeof AUTHORIZATION_REQUESTED;\n  payload: AuthPayloadType;\n}\n\ninterface FilteredTransactionsData {\n  entities: {\n    Cancelled: {\n      [index: string]: TransactionEntry;\n    };\n    Completed: {\n      [index: string]: TransactionEntry;\n    };\n    Pending: {\n      [index: string]: TransactionEntry;\n    };\n  };\n  result: { id: string; schema: string };\n}\n\nfunction* authorizeUser(action: AuthActionType): Generator {\n  try {\n    const authRespond: any = yield call(requestAuth, action.payload);\n    if (authRespond.resultCode !== 0) throw new Error(authRespond.messages[0]);\n    yield put(authSucceeded());\n  } catch (e: any) {\n    yield put(authFailed(e.message));\n  }\n}\n\ntype TransactionsPayloadType = Array<TransactionEntry>;\n\ninterface TransactionsActionType {\n  type: typeof PUT_TRANSACTIONS_REQUESTED;\n  payload: TransactionsPayloadType;\n}\n\nfunction* fetchTransactions(action: TransactionsActionType): Generator {\n  try {\n    const PendingSchema = new schema.Entity(\n        \"Pending\",\n        {},\n        { idAttribute: \"TransactionId\" }\n    );\n    const CompletedSchema = new schema.Entity(\n        \"Completed\",\n        {},\n        { idAttribute: \"TransactionId\" }\n    );\n    const CancelledSchema = new schema.Entity(\n        \"Cancelled\",\n        {},\n        { idAttribute: \"TransactionId\" }\n    );\n    const transactionsNormalizedByStatus = new schema.Array(\n        {\n          Pending: PendingSchema,\n          Completed: CompletedSchema,\n          Cancelled: CancelledSchema,\n        },\n        (input) => {\n          return `${input.Status}`;\n        }\n    );\n\n\n    const filteredTransactionsData: FilteredTransactionsData = normalize(\n        action.payload,\n        transactionsNormalizedByStatus\n    )\n    yield put(saveFilteredTransactionsToState(filteredTransactionsData.entities));\n  } catch (e: any) {\n    yield alert(e.message);\n  }\n}\n\nexport interface ChangeStatusPayloadActionType {\n  Status: \"Pending\" | \"Completed\" | \"Cancelled\";\n  TransactionId: string;\n}\n\ninterface ChangeStatusActionType {\n  type: typeof CHANGE_TRANSACTION_STATUS_REQUESTED;\n  payload: ChangeStatusPayloadActionType;\n}\n\nfunction* changeTransactionStatusRequested(\n  action: ChangeStatusActionType\n): Generator {\n  try {\n    yield put(changeTransactionStatus(action.payload));\n  } catch (e: any) {\n    yield alert(e.message);\n  }\n}\n\ninterface DeleteTransactionActionType {\n  type: typeof DELETE_TRANSACTION_REQUESTED;\n  payload: string;\n}\n\nfunction* deleteTransactionRequested(\n  action: DeleteTransactionActionType\n): Generator {\n  try {\n    yield put(deleteTransaction(action.payload));\n  } catch (e: any) {\n    yield alert(e.message);\n  }\n}\n\nfunction* mySaga() {\n  yield takeEvery(AUTHORIZATION_REQUESTED, authorizeUser);\n  yield takeEvery(PUT_TRANSACTIONS_REQUESTED, fetchTransactions);\n  yield takeEvery(\n    CHANGE_TRANSACTION_STATUS_REQUESTED,\n    changeTransactionStatusRequested\n  );\n  yield takeEvery(DELETE_TRANSACTION_REQUESTED, deleteTransactionRequested);\n}\n\nasync function requestAuth(params: AuthPayloadType) {\n  const respond = await axios.post(\"auth\", params);\n  return respond.data;\n}\n\nexport default mySaga;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport authorizationReducer from \"./authorizationSlice\";\nimport transactionReducer from \"./transactionsSlice\";\nimport fileBlobReducer from \"./fileBlobSlice\";\nimport createSagaMiddleware from \"redux-saga\";\nimport mySaga from \"./saga\";\n\nconst sagaMiddleware = createSagaMiddleware();\n\nexport const store = configureStore({\n  reducer: {\n    authorization: authorizationReducer,\n    transactions: transactionReducer,\n    fileBlob: fileBlobReducer,\n  },\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware().concat(sagaMiddleware),\n});\n\nsagaMiddleware.run(mySaga);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./Redux/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"react-select--inline\":\"Dropdowns_react-select--inline__1nQd6\",\"react-select__control\":\"Dropdowns_react-select__control__1NkYD\",\"react-select__single-value\":\"Dropdowns_react-select__single-value__3HlHa\"};"],"sourceRoot":""}