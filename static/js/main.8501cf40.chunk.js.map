{"version":3,"sources":["Components/Login/Login.module.css","Components/Loader/Loader.module.css","API/API.ts","Redux/hooks.ts","validators/validators.ts","Redux/Constants.ts","Redux/authorizationSlice.ts","Components/Login/LoginErrorAlert.tsx","Components/Login/Login.tsx","Components/HOCs/withAuth.tsx","Redux/transactionsSlice.ts","Redux/fileBlobSlice.ts","Components/Mainpage/ImportButton/ImportButton.tsx","Components/Mainpage/EditPopup/EditPopupDropdown/EditPopupDropdown.tsx","Components/Mainpage/EditPopup/EditPopup.tsx","Components/Mainpage/DeletePopup/DeletePopup.tsx","Components/Mainpage/ActionButtons/ActionButtons.tsx","Components/Mainpage/TransactionsTable/TransactionsTable.tsx","Components/Mainpage/Paginator/Paginator.tsx","Components/Loader/Loader.tsx","Components/Mainpage/TableCombined.tsx","Components/HOCs/withLoading.tsx","Components/Mainpage/Dropdowns/Dropdowns.tsx","Components/Mainpage/ExportButton/ExportButton.tsx","Components/Mainpage/FileListGroup/FileListGroup.tsx","Components/Mainpage/MainPage.tsx","App.tsx","reportWebVitals.ts","Redux/saga.ts","Redux/store.ts","index.tsx"],"names":["module","exports","generateRespond","status","resCode","id","messages","resultCode","data","userId","MockAdapter","axios","onPost","reply","config","userData","JSON","parse","username","password","useAppDispatch","useDispatch","useAppSelector","useSelector","required","value","undefined","AUTHORIZATION_REQUESTED","PUT_TRANSACTIONS_REQUESTED","EXPORT_CSV_FILE_REQUESTED","CHANGE_TRANSACTION_STATUS_REQUESTED","DELETE_TRANSACTION_REQUESTED","STATUS_OPTIONS","label","TYPE_OPTIONS","authorizationSlice","createSlice","name","initialState","isAuthorized","errMessage","reducers","authSucceeded","state","authFailed","action","payload","cleanErrMessageField","actions","LoginErrorAlert","alertMessage","authorization","dispatch","useState","show","setShow","useEffect","Alert","variant","onClose","dismissible","Login","props","useRef","className","css","wrapper","style","position","bottom","right","onSubmit","e","type","render","min","handleSubmit","invalid","submitting","Form","validate","input","meta","textAlign","fontWeight","Group","controlId","Label","Control","ref","placeholder","touched","error","target","current","placement","arrowProps","popper","backgroundColor","padding","color","borderRadius","length","Button","disabled","withAuth","Component","transactionsSlice","transactionsList","transactionStatus","currentTablePage","totalAmountEntriesOfTheTable","transactionListByStatus","entities","Cancelled","Completed","Pending","result","schema","statusFilters","typeFilters","transactionListByType","Withdrawal","Refill","saveTransactionsToState","changeCurrentTablePage","awaitingForData","filterTransactionsData","PendingSchema","Entity","idAttribute","CompletedSchema","CancelledSchema","transactionsNormalizedByStatus","Array","Status","RefillSchema","WithdrawalSchema","transactionsNormalizedByType","Refills","Withdrawals","Type","normalize","defineStatusFilters","defineTypeFilters","defineTotalAmountEntriesOfTheTable","changeTransactionStatus","map","transaction","TransactionId","deleteTransaction","filter","fileBlobSlice","fileRequested","filesList","fileRequest","updateFileList","push","ImportButton","isLoading","setLoading","fileEL","accept","onChange","currentTarget","files","Papa","complete","results","delimiter","header","worker","visibility","onClick","click","EditPopupDropdown","setStatus","classNamePrefix","closeMenuOnSelect","components","makeAnimated","defaultValue","options","EditPopup","updatedStatus","setUpdatedStatus","handleClose","Modal","onHide","Header","closeButton","Title","Body","Footer","String","DeletePopup","ActionButtons","showEdit","setShowEdit","showDelete","setShowDelete","ButtonGroup","size","TransactionsTable","statusList","transactions","exportTransactionsRequest","fileBlob","forEach","statusFilter","filteredList","Object","entries","transEntry","fromEntries","transactionListValues","values","unparsedTableData","unparse","blob","Blob","saveAs","console","log","tableData","slice","arrEntryRow","transactionRow","cellEntry","index","keys","caption","Table","striped","bordered","hover","Paginator","totalAmountOfPages","Math","ceil","items","number","Pagination","Item","handleCurrentPageClick","active","Ellipsis","First","Prev","Next","Last","Loader","withLoading","display","justifyContent","Dropdowns","isMulti","val","ExportButton","FileListGroup","fileList","entry","ListGroup","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","authorizeUser","fetchTransactions","changeTransactionStatusRequested","deleteTransactionRequested","exportCsvFileRequested","mySaga","call","requestAuth","authRespond","Error","put","message","alert","takeEvery","params","a","post","respond","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","authorizationReducer","transactionReducer","fileBlobReducer","middleware","getDefaultMiddleware","concat","run","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8501cf40.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Login_wrapper__31AdJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"lds-grid\":\"Loader_lds-grid__GrKkF\"};","import axios from \"axios\";\nimport MockAdapter from \"axios-mock-adapter\";\n\nconst mock = new MockAdapter(axios);\n\nmock.onPost(\"/auth\").reply(function (config) {\n  let userData;\n  if (config.data) userData = JSON.parse(config.data);\n  if (userData?.username === \"test\" && userData?.password === \"666666\")\n    return generateRespond(200, 0, 1);\n  return generateRespond(200, 1, null, [\"Wrong authorization data\"]);\n});\n\nfunction generateRespond(\n  status: number,\n  resCode: number,\n  id: number | null,\n  messages: Array<string> = []\n) {\n  return [\n    status,\n    {\n      resultCode: resCode,\n      messages: messages,\n      data: {\n        userId: id,\n      },\n    },\n  ];\n}\n","import { TypedUseSelectorHook, useSelector, useDispatch } from \"react-redux\";\nimport { RootState, AppDispatch } from \"./store\";\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","export function required(value: string) {\n  return value ? undefined : \"This field is required\";\n}\n\nexport function minLength(min: number) {\n  return function (value: string) {\n    value = value ?? \"\";\n    return value.length > min\n      ? undefined\n      : `Min. length for this Field at least ${min} char.`;\n  };\n}\n","export const AUTHORIZATION_REQUESTED = \"AUTHORIZATION_REQUESTED\";\nexport const PUT_TRANSACTIONS_REQUESTED = \"PUT_TRANSACTIONS_REQUESTED\";\nexport const EXPORT_CSV_FILE_REQUESTED = \"EXPORT_CSV_FILE_REQUESTED\";\nexport const CHANGE_TRANSACTION_STATUS_REQUESTED =\n  \"CHANGE_TRANSACTION_STATUS_REQUESTED\";\nexport const DELETE_TRANSACTION_REQUESTED = \"DELETE_TRANSACTION_REQUESTED\";\n\nexport const AMOUNT_OF_ENTRIES_FOR_ONE_TABLE_PAGE = 10;\nexport const STATUS_OPTIONS: Array<{ value: string; label: string }> = [\n  { value: \"Pending\", label: \"Pending\" },\n  { value: \"Completed\", label: \"Completed\" },\n  { value: \"Cancelled\", label: \"Cancelled\" },\n];\nexport const TYPE_OPTIONS: Array<{ value: string; label: string }> = [\n  { value: \"Refill\", label: \"Refill\" },\n  { value: \"Withdrawal\", label: \"Withdrawal\" },\n];\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\ninterface AuthorizationState {\n  isAuthorized: boolean;\n  errMessage: string;\n}\n\nconst initialState: AuthorizationState = {\n  isAuthorized: false,\n  errMessage: \"\",\n};\n\nexport const authorizationSlice = createSlice({\n  name: \"authorization\",\n  initialState,\n  reducers: {\n    authSucceeded: (state) => {\n      state.isAuthorized = true;\n      state.errMessage = \"\";\n    },\n    authFailed: (state, action: PayloadAction<string>) => {\n      state.isAuthorized = false;\n      state.errMessage = action.payload;\n    },\n    cleanErrMessageField: (state) => {\n      state.errMessage = \"\";\n    },\n  },\n});\n\nexport const { authSucceeded, authFailed, cleanErrMessageField } =\n  authorizationSlice.actions;\n\nexport default authorizationSlice.reducer;\n","import React, { useEffect, useState } from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\nimport { cleanErrMessageField } from \"../../Redux/authorizationSlice\";\nimport { useAppDispatch, useAppSelector } from \"../../Redux/hooks\";\n\nfunction LoginErrorAlert() {\n  const alertMessage = useAppSelector(\n    (state) => state.authorization.errMessage\n  );\n  const dispatch = useAppDispatch();\n  const [show, setShow] = useState(false);\n\n  useEffect(\n    function () {\n      if (alertMessage) setShow(true);\n    },\n    [alertMessage]\n  );\n\n  if (show) {\n    return (\n      <Alert\n        variant=\"danger\"\n        onClose={() => {\n          setShow(false);\n          dispatch(cleanErrMessageField());\n        }}\n        dismissible\n      >\n        {alertMessage}\n      </Alert>\n    );\n  } else return null;\n}\n\nexport default LoginErrorAlert;\n","import React, { useRef } from \"react\";\nimport FormBootstrap from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport { Form, Field } from \"react-final-form\";\nimport { minLength, required } from \"../../validators/validators\";\nimport Overlay from \"react-bootstrap/cjs/Overlay\";\nimport css from \"./Login.module.css\";\nimport { useAppDispatch } from \"../../Redux/hooks\";\nimport { AUTHORIZATION_REQUESTED } from \"../../Redux/Constants\";\nimport LoginErrorAlert from \"./LoginErrorAlert\";\n\ninterface PropsType {\n  style?: React.CSSProperties;\n}\n\nexport const Login = (props: PropsType) => {\n  const username = useRef(null);\n  const password = useRef(null);\n  const dispatch = useAppDispatch();\n\n  const handleSubmit = (e: FormData) => {\n    dispatch({ type: AUTHORIZATION_REQUESTED, payload: e });\n  };\n\n  return (\n    <div className={css.wrapper}>\n      <div\n        style={{\n          position: \"absolute\",\n          bottom: 10,\n          right: 10,\n        }}\n      >\n        <LoginErrorAlert />\n      </div>\n      <Form\n        onSubmit={handleSubmit}\n        render={({ handleSubmit, invalid, submitting }) => {\n          return (\n            <FormBootstrap onSubmit={handleSubmit}>\n              <Field\n                validate={required}\n                name=\"username\"\n                render={({ input, meta }) => (\n                  <div\n                    style={{\n                      textAlign: \"left\",\n                      fontWeight: \"bold\",\n                    }}\n                  >\n                    <FormBootstrap.Group className=\"mb-3\" controlId=\"username\">\n                      <FormBootstrap.Label>Username</FormBootstrap.Label>\n                      <FormBootstrap.Control\n                        ref={username}\n                        {...input}\n                        placeholder=\"Username\"\n                      />\n                    </FormBootstrap.Group>\n                    {meta.touched && meta.error && (\n                      <Overlay\n                        target={username.current}\n                        show={true}\n                        placement=\"right\"\n                      >\n                        {({\n                          placement,\n                          arrowProps,\n                          show: _show,\n                          popper,\n                          ...props\n                        }) => (\n                          <div\n                            {...props}\n                            style={{\n                              backgroundColor: \"rgba(255, 100, 100, 0.85)\",\n                              padding: \"2px 10px\",\n                              color: \"white\",\n                              borderRadius: 3,\n                              ...props.style,\n                            }}\n                          >\n                            {meta.error}\n                          </div>\n                        )}\n                      </Overlay>\n                    )}\n                  </div>\n                )}\n              />\n              <Field\n                validate={minLength(4)}\n                name=\"password\"\n                render={({ input, meta }) => (\n                  <div\n                    style={{\n                      textAlign: \"left\",\n                      fontWeight: \"bold\",\n                    }}\n                  >\n                    <FormBootstrap.Group\n                      className=\"mb-3\"\n                      controlId=\"formBasicPassword\"\n                    >\n                      <FormBootstrap.Label>Password</FormBootstrap.Label>\n                      <FormBootstrap.Control\n                        ref={password}\n                        {...input}\n                        type=\"password\"\n                        placeholder=\"Password\"\n                      />\n                    </FormBootstrap.Group>\n                    {meta.touched && meta.error && (\n                      <Overlay\n                        target={password.current}\n                        show={true}\n                        placement=\"right\"\n                      >\n                        {({\n                          placement,\n                          arrowProps,\n                          show: _show,\n                          popper,\n                          ...props\n                        }) => (\n                          <div\n                            {...props}\n                            style={{\n                              backgroundColor: \"rgba(255, 100, 100, 0.85)\",\n                              padding: \"2px 10px\",\n                              color: \"white\",\n                              borderRadius: 3,\n                              ...props.style,\n                            }}\n                          >\n                            {meta.error}\n                          </div>\n                        )}\n                      </Overlay>\n                    )}\n                  </div>\n                )}\n              />\n\n              <Button\n                variant=\"primary\"\n                type=\"submit\"\n                disabled={submitting || invalid}\n              >\n                Login\n              </Button>\n            </FormBootstrap>\n          );\n        }}\n      />\n    </div>\n  );\n};\n","import React from \"react\";\nimport { useAppSelector } from \"../../Redux/hooks\";\nimport { Login } from \"../Login/Login\";\n\nfunction withAuth(Component: React.ComponentType) {\n  function AuthenticatedComponent() {\n    const isAuthorized = useAppSelector(\n      (state) => state.authorization.isAuthorized\n    );\n    return <div>{isAuthorized ? <Component /> : <Login />}</div>;\n  }\n\n  return AuthenticatedComponent;\n}\n\nexport default withAuth;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { normalize, schema } from \"normalizr\";\nimport { ChangeStatusPayloadActionType } from \"./saga\";\n\nexport interface TransactionEntry {\n  Amount: string;\n  ClientName: string;\n  Status: string;\n  TransactionId: string;\n  Type: string;\n}\n\ninterface TransactionListByStatus {\n  entities: {\n    Cancelled: Array<TransactionEntry>;\n    Completed: Array<TransactionEntry>;\n    Pending: Array<TransactionEntry>;\n  };\n  result: { id: string; schema: string };\n}\n\ninterface TransactionListByType {\n  entities: {\n    Withdrawal: Array<TransactionEntry>;\n    Refill: Array<TransactionEntry>;\n  };\n  result: { id: string; schema: string };\n}\n\ntype StatusFilters = Array<\"Completed\" | \"Cancelled\" | \"Pending\">;\ntype TypeFilters = Array<\"Withdrawal\" | \"Refill\">;\n\ninterface TransactionsState {\n  transactionsList: Array<TransactionEntry>;\n  transactionStatus: \"initial\" | \"importing\" | \"imported\" | \"error\";\n  currentTablePage: number;\n  totalAmountEntriesOfTheTable: number;\n  transactionListByStatus: TransactionListByStatus;\n  transactionListByType: TransactionListByType;\n  statusFilters: StatusFilters;\n  typeFilters: TypeFilters;\n}\n\nconst initialState: TransactionsState = {\n  transactionsList: [],\n  transactionStatus: \"initial\",\n  currentTablePage: 1,\n  totalAmountEntriesOfTheTable: 0,\n  transactionListByStatus: {\n    entities: {\n      Cancelled: [],\n      Completed: [],\n      Pending: [],\n    },\n    result: { id: \"\", schema: \"\" },\n  },\n  statusFilters: [\"Completed\", \"Cancelled\", \"Pending\"],\n  typeFilters: [\"Withdrawal\", \"Refill\"],\n  transactionListByType: {\n    entities: {\n      Withdrawal: [],\n      Refill: [],\n    },\n    result: {\n      id: \"\",\n      schema: \"\",\n    },\n  },\n};\n\nexport const transactionsSlice = createSlice({\n  name: \"transactions\",\n  initialState,\n  reducers: {\n    saveTransactionsToState: (\n      state,\n      action: PayloadAction<TransactionEntry[]>\n    ) => {\n      state.transactionsList = action.payload;\n      state.transactionStatus = \"imported\";\n    },\n    changeCurrentTablePage: (state, action: PayloadAction<number>) => {\n      state.currentTablePage = action.payload;\n    },\n    awaitingForData: (state) => {\n      state.transactionStatus = \"importing\";\n    },\n    filterTransactionsData: (state) => {\n      const PendingSchema = new schema.Entity(\n        \"Pending\",\n        {},\n        { idAttribute: \"TransactionId\" }\n      );\n      const CompletedSchema = new schema.Entity(\n        \"Completed\",\n        {},\n        { idAttribute: \"TransactionId\" }\n      );\n      const CancelledSchema = new schema.Entity(\n        \"Cancelled\",\n        {},\n        { idAttribute: \"TransactionId\" }\n      );\n      const transactionsNormalizedByStatus = new schema.Array(\n        {\n          Pending: PendingSchema,\n          Completed: CompletedSchema,\n          Cancelled: CancelledSchema,\n        },\n        (input) => {\n          return `${input.Status}`;\n        }\n      );\n\n      const RefillSchema = new schema.Entity(\n        \"Refills\",\n        {},\n        { idAttribute: \"TransactionId\" }\n      );\n      const WithdrawalSchema = new schema.Entity(\n        \"Withdrawals\",\n        {},\n        { idAttribute: \"TransactionId\" }\n      );\n      const transactionsNormalizedByType = new schema.Array(\n        {\n          Refills: RefillSchema,\n          Withdrawals: WithdrawalSchema,\n        },\n        (input) => {\n          return `${input.Type}s`;\n        }\n      );\n\n      state.transactionListByType = normalize(\n        state.transactionsList,\n        transactionsNormalizedByType\n      );\n\n      state.transactionListByStatus = normalize(\n        state.transactionsList,\n        transactionsNormalizedByStatus\n      );\n    },\n    defineStatusFilters: (state, action: PayloadAction<StatusFilters>) => {\n      state.statusFilters = action.payload;\n    },\n    defineTypeFilters: (state, action: PayloadAction<TypeFilters>) => {\n      state.typeFilters = action.payload;\n    },\n    defineTotalAmountEntriesOfTheTable: (\n      state,\n      action: PayloadAction<number>\n    ) => {\n      state.totalAmountEntriesOfTheTable = action.payload;\n    },\n    changeTransactionStatus: (\n      state,\n      action: PayloadAction<ChangeStatusPayloadActionType>\n    ) => {\n      state.transactionsList = state.transactionsList.map((transaction) => {\n        if (transaction.TransactionId !== action.payload.TransactionId)\n          return transaction;\n        return { ...transaction, Status: action.payload.Status };\n      });\n    },\n    deleteTransaction: (state, action: PayloadAction<string>) => {\n      state.transactionsList = state.transactionsList.filter(\n        (transaction) => transaction.TransactionId !== action.payload\n      );\n    },\n  },\n});\n\nexport const {\n  saveTransactionsToState,\n  changeCurrentTablePage,\n  awaitingForData,\n  filterTransactionsData,\n  defineStatusFilters,\n  defineTypeFilters,\n  defineTotalAmountEntriesOfTheTable,\n  changeTransactionStatus,\n  deleteTransaction,\n} = transactionsSlice.actions;\n\nexport default transactionsSlice.reducer;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\ninterface FileBlobState {\n  fileRequested: boolean;\n  filesList: Array<string>;\n}\n\nconst initialState: FileBlobState = {\n  fileRequested: false,\n  filesList: [],\n};\n\nexport const fileBlobSlice = createSlice({\n  name: \"fileBlobSlice\",\n  initialState,\n  reducers: {\n    fileRequest: (state, action: PayloadAction<boolean>) => {\n      state.fileRequested = action.payload;\n    },\n    updateFileList: (state, action: PayloadAction<string>) => {\n      state.filesList.push(action.payload);\n    },\n  },\n});\n\nexport const { fileRequest, updateFileList } = fileBlobSlice.actions;\n\nexport default fileBlobSlice.reducer;\n","import Papa from \"papaparse\";\nimport React, { ChangeEvent, useRef, useState } from \"react\";\nimport Button from \"react-bootstrap/cjs/Button\";\nimport { useAppDispatch } from \"../../../Redux/hooks\";\nimport { PUT_TRANSACTIONS_REQUESTED } from \"../../../Redux/Constants\";\nimport { awaitingForData } from \"../../../Redux/transactionsSlice\";\nimport { updateFileList } from \"../../../Redux/fileBlobSlice\";\n\nfunction ImportButton() {\n  const [isLoading, setLoading] = useState(false);\n  const fileEL = useRef<HTMLInputElement>(null);\n  const dispatch = useAppDispatch();\n\n  const handleClick = () => {\n    if (!isLoading) fileEL.current?.click();\n  };\n\n  const handleFileDownloading = (e: ChangeEvent<HTMLInputElement>) => {\n    if (e.currentTarget.files?.length) {\n      setLoading(true);\n      dispatch(awaitingForData());\n      dispatch(updateFileList(e.currentTarget.files[0].name));\n      Papa.parse(e.currentTarget.files[0], {\n        complete: (results) => {\n          setLoading(false);\n          dispatch({ type: PUT_TRANSACTIONS_REQUESTED, payload: results.data });\n        },\n        delimiter: \",\",\n        header: true,\n        worker: true,\n      });\n    }\n  };\n\n  return (\n    <span>\n      <input\n        accept=\".csv\"\n        onChange={handleFileDownloading}\n        ref={fileEL}\n        style={{ visibility: \"hidden\", position: \"fixed\" }}\n        type=\"file\"\n      />\n      <Button\n        className=\"m-1\"\n        variant=\"primary\"\n        disabled={isLoading}\n        onClick={handleClick}\n      >\n        {isLoading ? \"Importing…\" : \"Import\"}\n      </Button>\n    </span>\n  );\n}\n\nexport default ImportButton;\n","import React from \"react\";\nimport Select from \"react-select\";\nimport makeAnimated from \"react-select/animated\";\nimport { STATUS_OPTIONS } from \"../../../../Redux/Constants\";\n\ninterface PropType {\n  status: string;\n  setStatus: CallableFunction;\n}\n\nfunction EditPopupDropdown({ status, setStatus }: PropType) {\n  const handleStatusChange = (e: any) => {\n    setStatus(e.value);\n  };\n\n  return (\n    <Select\n      classNamePrefix=\"react-select\"\n      closeMenuOnSelect={true}\n      components={makeAnimated()}\n      defaultValue={STATUS_OPTIONS.filter((type) => type.value === status)}\n      options={STATUS_OPTIONS}\n      onChange={handleStatusChange}\n    />\n  );\n}\n\nexport default EditPopupDropdown;\n","import React, { useState } from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\nimport EditPopupDropdown from \"./EditPopupDropdown/EditPopupDropdown\";\nimport { useAppDispatch } from \"../../../Redux/hooks\";\nimport { CHANGE_TRANSACTION_STATUS_REQUESTED } from \"../../../Redux/Constants\";\n\ninterface PropType {\n  id: number;\n  show: boolean;\n  setShow: CallableFunction;\n  status: string;\n}\n\nfunction EditPopup({ id, show, setShow, status }: PropType) {\n  const dispatch = useAppDispatch();\n  const [updatedStatus, setUpdatedStatus] = useState(status);\n\n  const handleClose = () => setShow(false);\n  const handleSaveChanges = () => {\n    if (updatedStatus !== status) {\n      const action = {\n        Status: updatedStatus,\n        TransactionId: String(id),\n      };\n      dispatch({ type: CHANGE_TRANSACTION_STATUS_REQUESTED, payload: action });\n    }\n    setShow(false);\n  };\n\n  return (\n    <Modal show={show} onHide={handleClose}>\n      <Modal.Header closeButton>\n        <Modal.Title>Transaction ID: {id}.</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <span className={\"font-weight-bold\"}>Edit status:</span>\n        <EditPopupDropdown\n          status={updatedStatus}\n          setStatus={setUpdatedStatus}\n        />\n      </Modal.Body>\n      <Modal.Footer>\n        <Button variant=\"secondary\" onClick={handleClose}>\n          Close\n        </Button>\n        <Button variant=\"primary\" onClick={handleSaveChanges}>\n          Save Changes\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n\nexport default EditPopup;\n","import React from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\nimport { useAppDispatch } from \"../../../Redux/hooks\";\nimport { DELETE_TRANSACTION_REQUESTED } from \"../../../Redux/Constants\";\n\ninterface PropType {\n  id: number;\n  show: boolean;\n  setShow: CallableFunction;\n}\n\nfunction DeletePopup({ id, show, setShow }: PropType) {\n  const dispatch = useAppDispatch();\n\n  const handleClose = () => setShow(false);\n  const handleDeleteClick = () => {\n    dispatch({ type: DELETE_TRANSACTION_REQUESTED, payload: String(id) });\n    setShow(false);\n  };\n\n  return (\n    <Modal show={show} onHide={handleClose}>\n      <Modal.Header closeButton>\n        <Modal.Title>Confirmation needed</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <span className={\"font-weight-bold\"}>\n          Are you sure you want irreversibly Delete Transaction with id {id}?\n        </span>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button variant=\"primary\" onClick={handleClose}>\n          CANCEL\n        </Button>\n        <Button variant=\"danger\" onClick={handleDeleteClick}>\n          DELETE\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n\nexport default DeletePopup;\n","import React, { useState } from \"react\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\nimport Button from \"react-bootstrap/Button\";\nimport EditPopup from \"../EditPopup/EditPopup\";\nimport DeletePopup from \"../DeletePopup/DeletePopup\";\n\ninterface PropType {\n  id: number;\n  status: string;\n}\n\nfunction ActionButtons({ id, status }: PropType) {\n  const [showEdit, setShowEdit] = useState(false);\n  const [showDelete, setShowDelete] = useState(false);\n\n  const handleEditEvent = () => {\n    setShowEdit(true);\n  };\n  const handleDeleteEvent = () => {\n    setShowDelete(true);\n  };\n\n  return (\n    <>\n      <ButtonGroup size=\"sm\">\n        <Button variant=\"primary\" onClick={handleEditEvent}>\n          Edit\n        </Button>\n        <Button variant=\"danger\" onClick={handleDeleteEvent}>\n          Delete\n        </Button>\n      </ButtonGroup>\n\n      <EditPopup\n        status={status}\n        show={showEdit}\n        setShow={setShowEdit}\n        id={id}\n      />\n      <DeletePopup id={id} show={showDelete} setShow={setShowDelete} />\n    </>\n  );\n}\n\nexport default ActionButtons;\n","import React, { useEffect } from \"react\";\nimport Table from \"react-bootstrap/Table\";\nimport { useAppDispatch, useAppSelector } from \"../../../Redux/hooks\";\nimport { AMOUNT_OF_ENTRIES_FOR_ONE_TABLE_PAGE } from \"../../../Redux/Constants\";\nimport {\n  TransactionEntry,\n  defineTotalAmountEntriesOfTheTable,\n} from \"../../../Redux/transactionsSlice\";\nimport ActionButtons from \"../ActionButtons/ActionButtons\";\nimport { fileRequest } from \"../../../Redux/fileBlobSlice\";\nimport Papa from \"papaparse\";\nimport { saveAs } from \"file-saver\";\n\nfunction TransactionsTable() {\n  const dispatch = useAppDispatch();\n  const statusList = useAppSelector(\n    (state) => state.transactions.transactionListByStatus.entities\n  );\n  const exportTransactionsRequest = useAppSelector(\n    (state) => state.fileBlob.fileRequested\n  );\n  const statusFilters = useAppSelector(\n    (state) => state.transactions.statusFilters\n  );\n  const typeFilters = useAppSelector((state) => state.transactions.typeFilters);\n\n  let transactionsList = {};\n\n  statusFilters.forEach((statusFilter) => {\n    if (typeFilters.length === 2) {\n      transactionsList = { ...transactionsList, ...statusList[statusFilter] };\n    } else {\n      const filteredList = Object.entries(statusList[statusFilter]).filter(\n        (transEntry) => transEntry[1].Type === typeFilters[0]\n      );\n      transactionsList = {\n        ...transactionsList,\n        ...Object.fromEntries(filteredList),\n      };\n    }\n  });\n\n  const transactionListValues: Array<TransactionEntry> =\n    Object.values(transactionsList);\n\n  useEffect(() => {\n    if (exportTransactionsRequest) {\n      const unparsedTableData = Papa.unparse(transactionListValues);\n      const blob = new Blob([unparsedTableData], {\n        type: \"text/plain;charset=utf-8\",\n      });\n      saveAs(blob, \"transaction.csv\");\n      console.log(unparsedTableData);\n      dispatch(fileRequest(false));\n    }\n  }, [exportTransactionsRequest]);\n  useEffect(() => {\n    dispatch(defineTotalAmountEntriesOfTheTable(transactionListValues.length));\n  });\n\n  const currentTablePage = useAppSelector(\n    (state) => state.transactions.currentTablePage\n  );\n\n  let header: JSX.Element[] = [];\n  const tableData: JSX.Element[] = transactionListValues\n    .slice(\n      (currentTablePage - 1) * AMOUNT_OF_ENTRIES_FOR_ONE_TABLE_PAGE,\n      currentTablePage * AMOUNT_OF_ENTRIES_FOR_ONE_TABLE_PAGE\n    )\n    .map((arrEntryRow) => {\n      const arrEntryRowCells = Object.values(arrEntryRow);\n      const transactionRow = arrEntryRowCells.map((cellEntry, index) => (\n        <td key={cellEntry + String(currentTablePage - 1) + String(index)}>\n          {cellEntry}\n        </td>\n      ));\n      return (\n        <tr key={arrEntryRow.TransactionId + \"trt\"}>\n          {transactionRow}\n          <td>\n            <ActionButtons\n              status={arrEntryRow.Status}\n              id={+arrEntryRow.TransactionId}\n            />\n          </td>\n        </tr>\n      );\n    });\n\n  if (transactionListValues.length) {\n    const headerCaptions = Object.keys(transactionListValues[0]);\n    header = headerCaptions.map((caption, index) => (\n      <th key={caption + index}>{caption}</th>\n    ));\n  }\n\n  return (\n    <Table striped bordered hover size=\"sm\">\n      <thead>\n        <tr>\n          {header}\n          <th>Action</th>\n        </tr>\n      </thead>\n      <tbody>{tableData}</tbody>\n    </Table>\n  );\n}\n\nexport default TransactionsTable;\n","import React, { useEffect } from \"react\";\nimport Pagination from \"react-bootstrap/Pagination\";\nimport { AMOUNT_OF_ENTRIES_FOR_ONE_TABLE_PAGE } from \"../../../Redux/Constants\";\nimport { useAppDispatch, useAppSelector } from \"../../../Redux/hooks\";\nimport { changeCurrentTablePage } from \"../../../Redux/transactionsSlice\";\n\nfunction Paginator() {\n  const dispatch = useAppDispatch();\n  const currentTablePage = useAppSelector(\n    (state) => state.transactions.currentTablePage\n  );\n  const totalAmountEntriesOfTheTable = useAppSelector(\n    (state) => state.transactions.totalAmountEntriesOfTheTable\n  );\n  const totalAmountOfPages = Math.ceil(\n    totalAmountEntriesOfTheTable / AMOUNT_OF_ENTRIES_FOR_ONE_TABLE_PAGE\n  );\n  useEffect(() => {\n    if (currentTablePage > totalAmountOfPages)\n      dispatch(\n        changeCurrentTablePage(\n          totalAmountOfPages === 0 ? 1 : totalAmountOfPages\n        )\n      );\n  }, [totalAmountOfPages]);\n\n  const items: React.ReactElement[] = [];\n\n  newIteration: for (\n    let number = currentTablePage - 3;\n    number <= currentTablePage + 3;\n    number++\n  ) {\n    if (number < 1) continue newIteration;\n    if (number > totalAmountOfPages) continue newIteration;\n    items.push(\n      <Pagination.Item\n        onClick={() => handleCurrentPageClick(number)}\n        key={number + \"hgfh\"}\n        active={number === currentTablePage}\n      >\n        {number}\n      </Pagination.Item>\n    );\n  }\n\n  if (currentTablePage < totalAmountOfPages - 3 && totalAmountOfPages > 3) {\n    if (currentTablePage < totalAmountOfPages - 4)\n      items.push(<Pagination.Ellipsis key={\"Ellipsis\"} />);\n    items.push(\n      <Pagination.Item\n        onClick={() => handleCurrentPageClick(totalAmountOfPages)}\n        key={totalAmountOfPages + \"totalAmountOfPages\"}\n      >\n        {totalAmountOfPages}\n      </Pagination.Item>\n    );\n  }\n\n  function handleCurrentPageClick(number: number) {\n    dispatch(changeCurrentTablePage(number));\n  }\n\n  function handleNextClick() {\n    if (currentTablePage < totalAmountOfPages)\n      dispatch(changeCurrentTablePage(currentTablePage + 1));\n  }\n\n  function handlePrevClick() {\n    if (currentTablePage > 1)\n      dispatch(changeCurrentTablePage(currentTablePage - 1));\n  }\n\n  return (\n    <Pagination>\n      <Pagination.First onClick={() => dispatch(changeCurrentTablePage(1))} />\n      <Pagination.Prev onClick={handlePrevClick} />\n\n      {items}\n\n      <Pagination.Next onClick={handleNextClick} />\n      <Pagination.Last\n        onClick={() => dispatch(changeCurrentTablePage(totalAmountOfPages))}\n      />\n    </Pagination>\n  );\n}\n\nexport default Paginator;\n","import React from \"react\";\nimport css from \"./Loader.module.css\";\n\nfunction Loader() {\n  return (\n    <div className={css[\"lds-grid\"]}>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  );\n}\n\nexport default Loader;\n","import React from \"react\";\nimport TransactionsTable from \"./TransactionsTable/TransactionsTable\";\nimport Paginator from \"./Paginator/Paginator\";\nimport withLoading from \"../HOCs/withLoading\";\n\nfunction TableCombined() {\n  return (\n    <div>\n      <TransactionsTable />\n      <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n        <Paginator />\n      </div>\n    </div>\n  );\n}\n\nexport default withLoading(TableCombined);\n","import React from \"react\";\nimport { useAppSelector } from \"../../Redux/hooks\";\nimport Loader from \"../Loader/Loader\";\n\nfunction withLoader(Component: React.ComponentType) {\n  function WithLoaderComponent() {\n    const transactionStatus = useAppSelector(\n      (state) => state.transactions.transactionStatus\n    );\n    if (transactionStatus === \"initial\")\n      return <div>Please import *.csv file to start work</div>;\n    if (transactionStatus === \"importing\")\n      return (\n        <div>\n          <Loader />\n        </div>\n      );\n    if (transactionStatus === \"imported\") return <Component />;\n    return null;\n  }\n\n  return WithLoaderComponent;\n}\n\nexport default withLoader;\n","import React from \"react\";\nimport Select, { OptionsType, OptionTypeBase } from \"react-select\";\nimport makeAnimated from \"react-select/animated\";\nimport { STATUS_OPTIONS, TYPE_OPTIONS } from \"../../../Redux/Constants\";\nimport \"./Dropdowns.css\";\nimport { useAppDispatch } from \"../../../Redux/hooks\";\nimport {\n  defineStatusFilters,\n  defineTypeFilters,\n} from \"../../../Redux/transactionsSlice\";\n\nfunction Dropdowns() {\n  const dispatch = useAppDispatch();\n\n  const handleStatusChangeOptions = (\n    e: OptionTypeBase | OptionsType<OptionTypeBase> | null\n  ) => {\n    const values = e?.map((val: { value: string; label: string }) => val.value);\n    dispatch(defineStatusFilters(values));\n  };\n\n  const handleTypeChangeOptions = (\n    e: OptionTypeBase | OptionsType<OptionTypeBase> | null\n  ) => {\n    const values = e?.map((val: { value: string; label: string }) => val.value);\n    dispatch(defineTypeFilters(values));\n  };\n\n  return (\n    <div>\n      <Select\n        className=\"react-select--inline\"\n        classNamePrefix=\"react-select\"\n        closeMenuOnSelect={false}\n        components={makeAnimated()}\n        defaultValue={STATUS_OPTIONS}\n        isMulti\n        options={STATUS_OPTIONS}\n        onChange={handleStatusChangeOptions}\n      />\n      <Select\n        className=\"react-select--inline\"\n        classNamePrefix=\"react-select\"\n        closeMenuOnSelect={false}\n        components={makeAnimated()}\n        defaultValue={TYPE_OPTIONS}\n        isMulti\n        options={TYPE_OPTIONS}\n        onChange={handleTypeChangeOptions}\n      />\n    </div>\n  );\n}\n\nexport default Dropdowns;\n","import React, { useState } from \"react\";\nimport Button from \"react-bootstrap/cjs/Button\";\nimport { useAppDispatch, useAppSelector } from \"../../../Redux/hooks\";\nimport { EXPORT_CSV_FILE_REQUESTED } from \"../../../Redux/Constants\";\n\nfunction ExportButton() {\n  const dispatch = useAppDispatch();\n  const fileRequest = useAppSelector((state) => state.fileBlob.fileRequested);\n\n  const handleClick = () => {\n    dispatch({ type: EXPORT_CSV_FILE_REQUESTED, payload: true });\n  };\n\n  return (\n    <Button variant=\"primary\" disabled={fileRequest} onClick={handleClick}>\n      {fileRequest ? \"Exporting…\" : \"Export\"}\n    </Button>\n  );\n}\n\nexport default ExportButton;\n","import React from \"react\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport { useAppSelector } from \"../../../Redux/hooks\";\n\nfunction FileListGroup() {\n  const fileList = useAppSelector((state) => state.fileBlob.filesList).map(\n    (entry, index) => (\n      <ListGroup.Item key={entry + index} action variant=\"light\">\n        {entry}\n      </ListGroup.Item>\n    )\n  );\n\n  return <ListGroup className=\"mh-100\">{fileList}</ListGroup>;\n}\n\nexport default FileListGroup;\n","import React from \"react\";\nimport withAuth from \"../HOCs/withAuth\";\nimport ImportButton from \"./ImportButton/ImportButton\";\nimport TableCombined from \"./TableCombined\";\nimport Dropdowns from \"./Dropdowns/Dropdowns\";\nimport ExportButton from \"./ExportButton/ExportButton\";\nimport FileListGroup from \"./FileListGroup/FileListGroup\";\nimport \"./MainPage.css\";\n\nconst MainPage = () => {\n  return (\n    <div className=\"container\">\n      <header>Application Header</header>\n      <nav>\n        <section>\n          <Dropdowns />\n        </section>\n        <section>\n          <ImportButton /> <ExportButton />\n        </section>\n      </nav>\n      <main>\n        <TableCombined />\n      </main>\n      <aside>\n        <FileListGroup />\n      </aside>\n    </div>\n  );\n};\n\nexport default withAuth(MainPage);\n","import React from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./API/API\";\nimport MainPage from \"./Components/Mainpage/MainPage\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainPage />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import \"../API/API\";\nimport { call, put, takeEvery } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport {\n  AUTHORIZATION_REQUESTED,\n  PUT_TRANSACTIONS_REQUESTED,\n  CHANGE_TRANSACTION_STATUS_REQUESTED,\n  DELETE_TRANSACTION_REQUESTED,\n  EXPORT_CSV_FILE_REQUESTED,\n} from \"./Constants\";\nimport { authFailed, authSucceeded } from \"./authorizationSlice\";\nimport {\n  filterTransactionsData,\n  saveTransactionsToState,\n  changeTransactionStatus,\n  deleteTransaction,\n} from \"./transactionsSlice\";\nimport { TransactionEntry } from \"./transactionsSlice\";\nimport { fileRequest } from \"./fileBlobSlice\";\n\ninterface AuthPayloadType {\n  username: string;\n  password: string;\n}\n\ninterface AuthActionType {\n  type: typeof AUTHORIZATION_REQUESTED;\n  payload: AuthPayloadType;\n}\n\nfunction* authorizeUser(action: AuthActionType): Generator {\n  try {\n    const authRespond: any = yield call(requestAuth, action.payload);\n    if (authRespond.resultCode !== 0) throw new Error(authRespond.messages[0]);\n    yield put(authSucceeded());\n  } catch (e: any) {\n    yield put(authFailed(e.message));\n  }\n}\n\ntype TransactionsPayloadType = Array<TransactionEntry>;\n\ninterface TransactionsActionType {\n  type: typeof PUT_TRANSACTIONS_REQUESTED;\n  payload: TransactionsPayloadType;\n}\n\nfunction* fetchTransactions(action: TransactionsActionType): Generator {\n  try {\n    yield put(saveTransactionsToState(action.payload));\n    yield put(filterTransactionsData());\n  } catch (e: any) {\n    yield alert(e.message);\n  }\n}\n\nexport interface ChangeStatusPayloadActionType {\n  Status: \"Pending\" | \"Completed\" | \"Cancelled\";\n  TransactionId: string;\n}\n\ninterface ChangeStatusActionType {\n  type: typeof CHANGE_TRANSACTION_STATUS_REQUESTED;\n  payload: ChangeStatusPayloadActionType;\n}\n\nfunction* changeTransactionStatusRequested(\n  action: ChangeStatusActionType\n): Generator {\n  try {\n    yield put(changeTransactionStatus(action.payload));\n    yield put(filterTransactionsData());\n  } catch (e: any) {\n    yield alert(e.message);\n  }\n}\n\ninterface DeleteTransactionActionType {\n  type: typeof DELETE_TRANSACTION_REQUESTED;\n  payload: string;\n}\n\nfunction* deleteTransactionRequested(\n  action: DeleteTransactionActionType\n): Generator {\n  try {\n    yield put(deleteTransaction(action.payload));\n    yield put(filterTransactionsData());\n  } catch (e: any) {\n    yield alert(e.message);\n  }\n}\n\n//*********************\n\ninterface ExportCsvFileRequestedActionType {\n  type: typeof EXPORT_CSV_FILE_REQUESTED;\n  payload: boolean;\n}\n\nfunction* exportCsvFileRequested(\n  action: ExportCsvFileRequestedActionType\n): Generator {\n  try {\n    yield put(fileRequest(action.payload));\n  } catch (e: any) {\n    yield alert(e.message);\n  }\n}\n\nfunction* mySaga() {\n  yield takeEvery(AUTHORIZATION_REQUESTED, authorizeUser);\n  yield takeEvery(PUT_TRANSACTIONS_REQUESTED, fetchTransactions);\n  yield takeEvery(\n    CHANGE_TRANSACTION_STATUS_REQUESTED,\n    changeTransactionStatusRequested\n  );\n  yield takeEvery(DELETE_TRANSACTION_REQUESTED, deleteTransactionRequested);\n  yield takeEvery(EXPORT_CSV_FILE_REQUESTED, exportCsvFileRequested);\n}\n\nasync function requestAuth(params: AuthPayloadType) {\n  const respond = await axios.post(\"auth\", params);\n  return respond.data;\n}\n\nexport default mySaga;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport authorizationReducer from \"./authorizationSlice\";\nimport transactionReducer from \"./transactionsSlice\";\nimport fileBlobReducer from \"./fileBlobSlice\";\nimport createSagaMiddleware from \"redux-saga\";\nimport mySaga from \"./saga\";\n\nconst sagaMiddleware = createSagaMiddleware();\n\nexport const store = configureStore({\n  reducer: {\n    authorization: authorizationReducer,\n    transactions: transactionReducer,\n    fileBlob: fileBlobReducer,\n  },\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware().concat(sagaMiddleware),\n});\n\nsagaMiddleware.run(mySaga);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./Redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}